name: CI Pipeline

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - uses: actions/checkout@v4

      # 2. Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Install Flutter SDK
      - name: Install Flutter SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip xz-utils
          curl -LO https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.24.0-stable.tar.xz
          tar xf flutter_linux_3.24.0-stable.tar.xz
          echo "$PWD/flutter/bin" >> $GITHUB_PATH
          echo "$PWD/flutter/bin/cache/dart-sdk/bin" >> $GITHUB_PATH
          export PATH="$PATH:$PWD/flutter/bin"
          flutter doctor

      # 4. Install Dart SDK (only if used separately from Flutter)
      - name: Install Dart SDK
        run: |
          sudo apt-get update
          sudo apt-get install apt-transport-https
          sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor > /usr/share/keyrings/dart-archive-keyring.gpg'
          sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
          sudo apt-get update
          sudo apt-get install dart

      # 5. Grant execute permission for Maven Wrapper
      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./mvnw

      # 6. Install Flutter dependencies
      - name: Install Flutter dependencies
        run: flutter pub get --verbose

      # 7. Build and Test Spring demo
      - name: Build and Test Spring demo
        run: ./mvnw clean install

      # 8. Create Database if not exists (Amazon RDS)
      - name: Create Database on Amazon RDS
        env:
          RDS_HOST: ${{ secrets.RDS_HOST }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_DATABASE: ${{ secrets.RDS_DATABASE }}
        run: |
          mysql -h $RDS_HOST -P 3306 -u $RDS_USERNAME -p"$RDS_PASSWORD" -e "CREATE DATABASE IF NOT EXISTS $RDS_DATABASE;"

      # 9. Run SQL script (Amazon RDS)
      - name: Run SQL script on Amazon RDS
        env:
          RDS_HOST: ${{ secrets.RDS_HOST }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_DATABASE: ${{ secrets.RDS_DATABASE }}
        run: |
          mysql -h $RDS_HOST -P 3306 -u $RDS_USERNAME -p"$RDS_PASSWORD" $RDS_DATABASE < backup.sql

      # 10. Build Flutter Web
      - name: Build Flutter Web
        run: flutter build web

      # 11. Setup SSH (for EC2 deployment)
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 12. Deploy Flutter Web to EC2
      - name: Deploy Flutter Web to EC2
        run: |
          scp -r ./build/web/* ubuntu@13.124.3.87:/var/www/html/

      # 13. Restart Nginx on EC2
      - name: Restart Nginx on EC2
        run: |
          ssh ubuntu@13.124.3.87 "sudo systemctl restart nginx"
